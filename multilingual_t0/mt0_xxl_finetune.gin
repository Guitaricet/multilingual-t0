from __gin__ import dynamic_registration

import __main__ as train_script
#from t5.data import mixtures
from t5x import models
from t5x import partitioning
from t5x import utils

import tasks

include "mt5_xxl.gin"
include "t5x/configs/runs/finetune.gin"

MIXTURE_OR_TASK_NAME = "d4_gpt_sglue_train"

TASK_FEATURE_LENGTHS = {"inputs": 1024, "targets": 256}
TRAIN_STEPS = 1012500  # 1000000 pre-trained steps + 12500 fine-tuning steps.

# `LOSS_NORMALIZING_FACTOR`: When fine-tuning a model that was pre-trained
# using Mesh Tensorflow (e.g. the public T5 / mT5 / ByT5 models), this should be
# set to `pretraining batch_size` * `target_token_length`. For T5 and T5.1.1:
# `2048 * 114`. For mT5: `1024 * 229`. For ByT5: `1024 * 189`.
LOSS_NORMALIZING_FACTOR = 234496
INITIAL_CHECKPOINT_PATH = "gs://t5-data/pretrained_models/mt5/xxl/model.ckpt-1000000"

DROPOUT_RATE = 0.1

train/utils.DatasetConfig:
  batch_size = 1024
  use_cached = True
  pack = True

train_eval/utils.DatasetConfig:
  batch_size = 4
  use_cached = True
  pack = True

infer_eval/utils.DatasetConfig:
  use_cached = True

train_script.train:
  eval_period = 12500
  eval_steps = 10
  random_seed = 0
  use_hardware_rng = True
  partitioner = @partitioning.ModelBasedPjitPartitioner()

utils.RestoreCheckpointConfig:
  mode = 'specific'
  path = %INITIAL_CHECKPOINT_PATH
  dtype = 'float32'
utils.SaveCheckpointConfig:
  period = 2500  # checkpoint frequency

trainer.Trainer.num_microbatches = 16
# `num_decodes` is equivalent to a beam size in a beam search decoding.
models.EncoderDecoderModel.predict_batch_with_aux.num_decodes = 1

partitioning.ModelBasedPjitPartitioner:
  model_parallel_submesh = (2,4,4,1)
  #model_parallel_submesh = (2,4,2,1)
  logical_axis_rules = @tasks.fully_sharded_logical_axis_rules()
